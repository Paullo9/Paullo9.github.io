{"kind":"Notebook","sha256":"e76035f9d8e3ab5cb5e98cbe6a3d29e588b4dddafa0cd04968bc0913d8578b35","slug":"notebook","location":"/02-notebook.ipynb","dependencies":[],"frontmatter":{"title":"Linking Interactive Notebooks","subtitle":"Evolve markdown documents and notebooks into structured data","authors":[{"nameParsed":{"literal":"Rowan Cockett","given":"Rowan","family":"Cockett"},"name":"Rowan Cockett","orcid":"0000-0002-7859-8394","email":"rowan@curvenote.com","affiliations":["Executable Books","Curvenote"],"id":"contributors-02-notebook-generated-uid-0","corresponding":true}],"affiliations":[{"id":"Executable Books","name":"Executable Books"},{"id":"Curvenote","name":"Curvenote"}],"date":"2023-01-23","license":{"code":{"id":"MIT","name":"MIT License","osi":true,"free":true,"url":"https://opensource.org/licenses/MIT"}},"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"github":"https://github.com/Paullo9","exports":[{"format":"ipynb","filename":"02-notebook.ipynb","url":"/02-notebook-1902bd6491ce549c8fd92489eaea3484.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"MyST allows you to directly include Jupyter Notebooks in your books, documents and websites.\nThis Jupyter Notebook can be rendered directly using MyST.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"RMd4nvEp2x"}],"key":"kvCiyGxsEE"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"For example, let us import ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"iY5BVDLpnS"},{"type":"inlineCode","value":"altair","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"fKq0QSYjlu"},{"type":"text","value":" and create a demo of an interactive plot!","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"VOPZuc3FZ1"}],"key":"o3kEHpQ6L3"}],"key":"K6TAt528PD"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\nbrush = alt.selection_interval(encodings=['x'])\npoints = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    size='Acceleration',\n    color=alt.condition(brush, 'Origin:N', alt.value('lightgray'))\n).add_selection(brush)\n\nbars = alt.Chart(source).mark_bar().encode(\n    y='Origin:N',\n    color='Origin:N',\n    x='count(Origin):Q'\n).transform_filter(brush)","key":"q110RKm4u1"},{"type":"output","id":"VgXMDYuPptKMDYF25iSMn","data":[{"name":"stderr","output_type":"stream","text":"/var/folders/q4/jhd9ncvx6w56g5stfrmz18000000gn/T/ipykernel_82245/3253246330.py:11: AltairDeprecationWarning: Deprecated in `altair=5.0.0`. Use add_params instead.\n  ).add_selection(brush)\n"}],"key":"htELyRBMF0"}],"key":"rMYVklZ1nw"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can now plot the altair example, which is fully interactive, try dragging in the plot to select cars by their horsepower.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wX2rwO3M29"}],"key":"civJR49OvB"}],"key":"NYTaxJDnxZ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"points & bars","identifier":"horsepower-code","enumerator":"1","html_id":"horsepower-code","key":"D57f1Z5bSs"},{"type":"output","id":"SSP4SMPFI3lD8j--rvV4o","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"03db383dba6f8d467a58f56383ce6068","path":"/03db383dba6f8d467a58f56383ce6068.html"},"text/plain":{"content":"alt.VConcatChart(...)","content_type":"text/plain"}}}],"identifier":"horsepower-output","html_id":"horsepower-output","key":"M5MHp97R9X"}],"identifier":"horsepower","label":"horsepower","html_id":"horsepower","key":"HX3pBaGvOy"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# https://matplotlib.org/stable/gallery/statistics/time_series_histogram.html#sphx-glr-gallery-statistics-time-series-histogram-py\nfrom copy import copy\n\nimport numpy as np\nimport numpy.matlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm","key":"yML3ZByfIa"},{"type":"output","id":"qGeDxBWDsldfqBZ0cag55","data":[],"key":"Wy92DzE5eq"}],"key":"LliLmSnDe2"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Make some data; a 1D random walk + small fraction of sine waves\nnum_series = 1000\nnum_points = 100\nSNR = 0.10  # Signal to Noise Ratio\nx = np.linspace(0, 4 * np.pi, num_points)\n# Generate unbiased Gaussian random walks\nY = np.cumsum(np.random.randn(num_series, num_points), axis=-1)\n# Generate sinusoidal signals\nnum_signal = int(round(SNR * num_series))\nphi = (np.pi / 8) * np.random.randn(num_signal, 1)  # small random offset\nY[-num_signal:] = (\n    np.sqrt(np.arange(num_points))[None, :]  # random walk RMS scaling factor\n    * (np.sin(x[None, :] - phi)\n       + 0.05 * np.random.randn(num_signal, num_points))  # small random noise\n)\n\n\n# Now we will convert the multiple time series into a histogram. Not only will\n# the hidden signal be more visible, but it is also a much quicker procedure.\n# Linearly interpolate between the points in each time series\nnum_fine = 800\nx_fine = np.linspace(x.min(), x.max(), num_fine)\ny_fine = np.empty((num_series, num_fine), dtype=float)\nfor i in range(num_series):\n    y_fine[i, :] = np.interp(x_fine, x, Y[i, :])\ny_fine = y_fine.flatten()\nx_fine = np.matlib.repmat(x_fine, num_series, 1).flatten()","key":"xC0rHzVpZd"},{"type":"output","id":"PrZZD6qNzXqOqjoQ1M9yY","data":[],"key":"Lg7Absq84n"}],"key":"dtA6fCSWrq"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Important!\nThis data is simulated, and may just be random noise! ðŸ”Š","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zrzDs1ZWDS"}],"key":"EQOYXPHtx2"}],"key":"nRPHt3jXT2"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, axes = plt.subplots(figsize=(8, 4), constrained_layout=True)\ncmap = copy(plt.cm.plasma)\ncmap.set_bad(cmap(0))\nh, xedges, yedges = np.histogram2d(x_fine, y_fine, bins=[400, 100])\npcm = axes.pcolormesh(xedges, yedges, h.T, cmap=cmap,\n                         norm=LogNorm(vmax=1.5e2), rasterized=True)\nfig.colorbar(pcm, ax=axes, label=\"# points\", pad=0)\naxes.set_title(\"2d histogram and log color scale\");","identifier":"plasma-code","enumerator":"2","html_id":"plasma-code","key":"tu8HStr69H"},{"type":"output","id":"VLBJfReZ6QRWeTQKNhmfg","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"88d72e78d399d40f4c1c7a1ef2ce9c47","path":"/88d72e78d399d40f4c1c7a1ef2ce9c47.png"},"text/plain":{"content":"<Figure size 800x400 with 2 Axes>","content_type":"text/plain"}}}],"identifier":"plasma-output","html_id":"plasma-output","key":"HufwWsiosR"}],"identifier":"plasma","label":"plasma","html_id":"plasma","key":"GmMf3YpXO1"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\ndt = 0.01\nt = np.arange(0, 30, dt)\nnse1 = np.random.randn(len(t))                 # white noise 1\nnse2 = np.random.randn(len(t))                 # white noise 2\n\n# Two signals with a coherent part at 10 Hz and a random part\ns1 = np.sin(2 * np.pi * 10 * t) + nse1\ns2 = np.sin(2 * np.pi * 10 * t) + nse2\n\nfig, axs = plt.subplots(2, 1, layout='constrained')\naxs[0].plot(t, s1, t, s2)\naxs[0].set_xlim(0, 2)\naxs[0].set_xlabel('Time (s)')\naxs[0].set_ylabel('s1 and s2')\naxs[0].grid(True)\n\ncxy, f = axs[1].cohere(s1, s2, 256, 1. / dt)\naxs[1].set_ylabel('Coherence')\n\nplt.show()","key":"mjvNK7hSVC"},{"type":"output","id":"XRnU-bquIRsChhioGXy9A","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"c74f6c68982cc9f82c43eecebacd2bfc","path":"/c74f6c68982cc9f82c43eecebacd2bfc.png"},"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"}}}],"key":"iKIikkLD4i"}],"key":"JDjDGxJKIa"}],"key":"R4EjrHLLHd"},"references":{"cite":{"order":[],"data":{}}}}